[shader]
Description=Debug Test: VertexIntegerArray (same as ripple_grid)

VertexSourceTypeName=VertexIntegerArray
VertexShaderFilename=vertint.vert

[VertexIntegerArray]
VertexIntegerCount=2000
ArrayDrawingMode=Points

# This is an example of how to reference stand-alone function-library source.
#
# If a .vert or .frag extension isn't provided, it will be determined during
# loading (and having one of each is supported). For multipass or FX usage,
# see also the Test Content files "multipass.conf" and "mpvizconf1.conf".
# There is no FX example in Test Content but it works like multipass.conf.
# You can optionally specify a complete pathname to a filename (with extension).
# Pathnames are validated during config loading. If the file isn't found, an
# exception is thrown. Duplicate entries are ignored.
#
# If the file has a .glsl extension, the functions can be compiled into a vertex
# or fragment shader, or both. Prefix the filename with "vert:" or "frag:" to
# specify one or the other (which loads a little faster and uses a little less
# memory), or leave the prefix off to link the library to both programs.
[libraries]
vert:vert_library


# This is an example of how to set shader-level FX options.
#
# A visualiztion config can specify uniforms to be applied to specific
# post-processing FX shaders. The section name is [fx-uniforms:filename] where
# "filename" is the FX .conf name without the extension. The options below are
# documented in the TestContent\FX\option_uniforms1.frag shader file. Typically
# the shader defines defaults for these, and even if the FX .conf defines settings
# any settings defined by the visualizer will override those.
#
# For a multipass visualization that specifies .conf files for any of the passes,
# only the fx-uniforms in the main .conf are recognized and loaded.
#
# In this example, "option_uniforms" is the name of a TestContent FX .conf file.
[fx-uniforms:option_uniforms]

# For this example the default frame count is fine:
# option_mix_frame = 4.0

# How much of the primary shader to mix into non-key pixels
option_mix_factor = 0.05

# Our color key is nearly black -- the primary shader will NOT be mixed into pixels
# which match the specified color key (which reduces interferece with the FX content)
option_key_r = 20.
option_key_g = 5.
option_key_b = 0.

# Allow a variance from a perfect match with the RGB key color. For this shader,
# that means a *perceptual* difference which is actually relatively small for
# darker colors (brighter colors are harder for people to discern color changes)
option_key_tolerance = 0.20
